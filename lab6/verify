#!/usr/bin/python

# Chris Fallin, 2012
# Yoongu Kim, 2013

import sys, os, subprocess, re, glob

sys.path.append("447scripts/argparse-1.2.1")

import argparse

ref = "./refsim"
sim = "./sim"

bold="\033[1m"
green="\033[0;32m"
red="\033[0;31m"
normal="\033[0m"


def main():
    all_inputs = glob.glob("447inputs/*/*.x")

    parser = argparse.ArgumentParser()
    parser.add_argument("inputs", nargs="*", default=all_inputs)
    parser = parser.parse_args()

    for i in parser.inputs:
        if not os.path.exists(i):
            print red + "18-447 ERROR -- input file (*.x) not found: " + i + normal
            continue

        print bold + "18-447 Testing: " + normal + i
        ref_out, sim_out = run(i)

        # match
        if ref_out == sim_out:
            print green + "CORRECT! " + normal + "Your simulator MATCHES the reference simulator for input: " + i
            print
            continue

        # mismatch
        print red + "INCORRECT! " + normal + "Your simulator does NOT match the reference for input: " + i
        print "  " + "Stats".ljust(14) + "RefSim".center(14) + "YourSim".center(14)

        ref_out = ref_out.split("\n")
        sim_out = sim_out.split("\n")
        for r, s in zip(ref_out, sim_out):

            r0 = r.split()[0]
            r1 = r.split()[1]
            s1 = s.split()[1]

            if r1 == s1:
                print "  " + r0.ljust(14) + r1.center(14) + s1.center(14)
            else: 
                print "  " + red + r0.ljust(14) + r1.center(14) + s1.center(14) + normal
        print


def run(i):
    global ref, sim

    refproc = subprocess.Popen([ref, i], executable=ref, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    simproc = subprocess.Popen([sim, i], executable=sim, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    cmds = ""
    cmdfile = os.path.splitext(i)[0] + ".cmd"
    if os.path.exists(cmdfile):
      cmds += open(cmdfile).read()

    cmds += "\ngo\nrdump\nquit\n"
    (r, r_err) = refproc.communicate(input=cmds)
    (s, s_err) = simproc.communicate(input=cmds)

    return filter_stats(r), filter_stats(s)


def filter_stats(out):
    lines = out.split("\n")
    regex = re.compile("^(HI:)|(LO:)|(R\d+:)|(PC:)|(Cycles:)|(Fetched\w+:)|(Retired\w+:)|(IPC:)|(Flushes:).*$")
    out = []
    for l in lines:
        if regex.match(l):
          out.append(l)

    return "\n".join(out)


if __name__ == "__main__":
    main()

